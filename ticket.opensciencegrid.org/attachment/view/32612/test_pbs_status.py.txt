#!/bin/env python
import csv
import os
import pwd
import sys

def convert_cpu_to_seconds(cpu_string):
    import re
    h,m,s = re.split(':',cpu_string)
    return int(h) * 3600 + int(m) * 60 + int(s)

# List the attributes that we want
return_dict = { "ImageSize": 0, "ExitCode": 0, "RemoteUserCpu": 0 }
# First, determine if this is a pbs or slurm machine.
uid = os.geteuid()
username = pwd.getpwuid(uid).pw_name
cache_dir = os.path.join("/var/tmp", "qstat_cache_%s" % username)
cluster_type_file = os.path.join(cache_dir, "cluster_type")
cluster_type_cache = None
if not cluster_type_cache:
    # Look for the special file, cluster_type
    if os.path.exists(cluster_type_file):
        cluster_type_cache = open(cluster_type_file).read()
    else:
        # No idea what type of cluster is running, not set, so give up
        print return_dict
        sys.exit("cluster_type file is not present, not checking for completed job statistics")

# Slurm completion 
if cluster_type_cache == "slurm":

    # Next, query the appropriate interfaces for the completed job information
    # TODO: fix for pbs
    print "Querying sacct for completed job for jobid: %s" % (str(sys.argv[1]))
    child_stdout = os.popen("sacct -j %s -l --noconvert -P" % (str(sys.argv[1])))
    sacct_data = child_stdout.readlines()
    ret = child_stdout.close()

    if ret:
        # retry without --noconvert for slurm < 15.8
        child_stdout = os.popen("sacct -j %s -l -P" % (str(sys.argv[1])))
        sacct_data = child_stdout.readlines()
        child_stdout.close()

    try:
        reader = csv.DictReader(sacct_data, delimiter="|")
    except Exception, e:
        print return_dict
        sys.exit("Unable to read in CSV output from sacct: %s" % str(e))
        
    # Slurm can return more than 1 row, for some odd reason.
    # so sum up relevant values
    for row in reader:
        if row["AveCPU"] is not "":
            return_dict['RemoteUserCpu'] += convert_cpu_to_seconds(row["AveCPU"]) * int(row["AllocCPUS"])
        if row["MaxRSS"] is not "":
            # Remove the trailing 'K'
            return_dict["ImageSize"] += int(row["MaxRSS"].replace('K', ''))
        if row["ExitCode"] is not "":
            return_dict["ExitCode"] = int(row["ExitCode"].split(":")[0])

# PBS completion        
elif cluster_type_cache == "pbs":
    pass

print return_dict
