
JOB_ROUTER_DEFAULTS_GENERATED = \
  [ \
    MaxIdleJobs = 2000; \
    MaxJobs = $(CONDORCE_MAX_JOBS); \
    /* by default, accept all jobs */ \
    Requirements = True; \
    \
    /* now modify routed job attributes */ \
    /* remove routed job if the client disappears for 48 hours or it is idle for 6 */ \
    /*set_PeriodicRemove = (LastClientContact - time() > 48*60*60) || \
                         (JobStatus == 1 && (time() - QDate) > 6*60);*/ \
    delete_PeriodicRemove = true; \
    delete_CondorCE = true; \
    set_RoutedJob = true; \
    copy_environment = "orig_environment"; \
    set_osg_environment = "OSG_GRID='/pscratch/osg/wn-1.2' OSG_SQUID_LOCATION='ndcms.crc.nd.edu:3128' OSG_SITE_READ='/pscratch/osg/data' OSG_APP='/pscratch/osg/app' OSG_GLEXEC_LOCATION='None' OSG_DATA='/pscratch/osg/data' OSG_HOSTNAME='opteron03.crc.nd.edu' GLOBUS_LOCATION='/usr' OSG_STORAGE_ELEMENT='False' OSG_SITE_NAME='NWICG_NotreDame' OSG_WN_TMP='/pscratch/osg/wn_tmp' PATH='/osg/condor/bin:/osg/condor/sbin:/osg/condor/libexec:/bin:/usr/bin:/sbin:/usr/sbin' OSG_DEFAULT_SE='opteron03.crc.nd.edu' OSG_SITE_WRITE='/pscratch/osg/data'"; \
    set_CondorCECollectorHost = ifThenElse(regexp(":", "$(COLLECTOR_HOST)"), "$(COLLECTOR_HOST)", strcat("$(COLLECTOR_HOST)", ":", $(COLLECTOR_PORT))); \
    eval_set_environment = debug(strcat("HOME=", userHome(Owner, "/"), " CONDORCE_COLLECTOR_HOST=", CondorCECollectorHost, " ", \
        ifThenElse(orig_environment is undefined, osg_environment, \
          strcat(osg_environment, " ", orig_environment) \
        ))); \
    \
    /* Set new requirements */ \
    /* set_requirements = LastClientContact - time() < 30*60; */ \
    set_requirements = True; \ 
set_InputRSL = ifThenElse(GlobusRSL is null, [], eval_rsl(GlobusRSL)); \
    /* Note default memory request of 2GB */ \
    /* Note yet another nested condition allow pass attributes (maxMemory,xcount,jobtype,queue) via gWMS Factory described within ClassAd if undefined via RSL */ \
    eval_set_RequestMemory = ifThenElse(InputRSL.maxMemory isnt null, InputRSL.maxMemory, ifThenElse(maxMemory isnt null, maxMemory, ifThenElse(default_maxMemory isnt null, default_maxMemory, 2000))); \
    eval_set_remote_queue = ifThenElse(InputRSL.queue isnt null, InputRSL.queue, ifThenElse(batch_queue isnt null, batch_queue, ifThenElse(queue isnt null, queue, ifThenElse(default_queue isnt null, default_queue, "")))); \
    /* HTCondor uses RequestCpus; blahp uses SMPGranularity and NodeNumber.  Default is 1 core. */ \
    eval_set_RequestCpus = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); \
    eval_set_remote_SMPGranularity = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); \
    eval_set_remote_NodeNumber = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); \
    /* If remote_cerequirements is a string, BLAH will parse it as an expression before examining it */ \
    eval_set_remote_cerequirements = ifThenElse(InputRSL.maxWallTime isnt null, strcat("Walltime == ", string(60*InputRSL.maxWallTime), " && CondorCE == 1"), \
        ifThenElse(maxWallTime isnt null, strcat("Walltime == ", string(60*maxWallTime), " && CondorCE == 1"), \
          ifThenElse(default_maxWallTime isnt null, strcat("Walltime == ", string(60*default_maxWallTime), " && CondorCE == 1"), \
            "CondorCE == 1"))); \
    copy_OnExitHold = "orig_OnExitHold"; \
    eval_set_OnExitHold = ifThenElse(orig_OnExitHold isnt null, orig_OnExitHold, false) || ifThenElse(minWalltime isnt null && RemoteWallClockTime isnt null, RemoteWallClockTime < 60*minWallTime, false); \
    copy_OnExitHoldReason = "orig_OnExitHoldReason"; \
    eval_set_OnExitHoldReason = ifThenElse((orig_OnExitHold isnt null) && orig_OnExitHold, \
        ifThenElse(orig_OnExitHoldReason isnt null, orig_OnExitHoldReason, strcat("The on_exit_hold expression (", unparse(orig_OnExitHold), ") evaluated to TRUE.")), \
        ifThenElse(minWalltime isnt null && RemoteWallClockTime isnt null && (RemoteWallClockTime < 60*minWallTime), strcat("The job's wall clock time, ", int(RemoteWallClockTime/60), "min, is less than the minimum specified by the job (", minWalltime, ")"), "Job held for unknown reason.")); \
    copy_OnExitHoldSubCode = "orig_OnExitHoldSubCode"; \
    eval_set_OnExitHoldSubCode = ifThenElse((orig_OnExitHold isnt null) && orig_OnExitHold, \
        ifThenElse(orig_OnExitHoldSubCode isnt null, orig_OnExitHoldSubCode, 1), 42); \
  ]

