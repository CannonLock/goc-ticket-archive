# Configuration from machine: gate03.aglt2.org
ABORT_ON_EXCEPTION = false
ACCOUNTANT_HOST = 
ACCOUNTANT_LOCAL_DOMAIN = 
ActivationTimer = ifThenElse(JobStart =!= UNDEFINED, (time() - JobStart), 0)
ActivityTimer = (time() - EnteredCurrentActivity)
ADD_WINDOWS_FIREWALL_EXCEPTION = true
ALL_DEBUG = 
ALLOW_ADMIN_COMMANDS = true
ALLOW_ADMINISTRATOR = $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME)
ALLOW_DAEMON = $(FRIENDLY_DAEMONS)
ALLOW_NEGOTIATOR = $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME)
ALLOW_OWNER = $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME)
ALLOW_VM_CRUFT = false
ALLOW_WRITE = $(FRIENDLY_DAEMONS)
ALWAYS_CLOSE_USERLOG = false
ALWAYS_USE_LOCAL_CKPT_SERVER = false
ALWAYS_VM_UNIV_USE_NOBODY = false
AMAZON_GAHP = $(SBIN)/amazon_gahp
AMAZON_GAHP_LOG = $(USER_LOG)/user/AmazonGahpLog.$(USERNAME)
APPEND_RANK = 
APPEND_RANK_STANDARD = 
APPEND_RANK_VANILLA = 
APPEND_REQ_STANDARD = 
APPEND_REQ_VANILLA = 
APPEND_REQ_VM = 
APPEND_REQUIREMENTS = 
ARCH = X86_64
AUTO_INCLUDE_SHARED_PORT_IN_DAEMON_LIST = true
BACKFILL_SYSTEM = 
BackgroundLoad = 0.3
BASE_CGROUP = 
BATCH_GAHP = $(BIN)/blahpd
BATCH_GAHP_CHECK_STATUS_ATTEMPTS = 5
BENCHMARKS_JOBLIST = mips kflops
BENCHMARKS_KFLOPS_EXECUTABLE = $(LIBEXEC)/condor_kflops
BENCHMARKS_KFLOPS_JOB_LOAD = 1.0
BENCHMARKS_MAX_JOB_LOAD = 1.0
BENCHMARKS_MIPS_EXECUTABLE = $(LIBEXEC)/condor_mips
BENCHMARKS_MIPS_JOB_LOAD = 1.0
BenchmarkTimer = (time() - LastBenchmark)
BigJob = (TARGET.ImageSize >= (50 * 1024))
BIN = $(RELEASE_DIR)/bin
BIND_ALL_INTERFACES = true
BIOTECH = 
C_GAHP.ALLOW_DAEMON = $(ALLOW_DAEMON)
C_GAHP_LOCK = /CGAHPLock.$(USERNAME)
C_GAHP_LOG = /tmp/CGAHPLog.$(USERNAME)
C_GAHP_WORKER_THREAD_LOCK = $(USER_LOCK)/CGAHPWorkerLock.$(USERNAME)
C_GAHP_WORKER_THREAD_LOG = $(USER_LOG)/CGAHPWorkerLog.$(USERNAME)
CCB_ADDRESS = 
CCB_HEARTBEAT_INTERVAL = 300
CCB_POLLING_INTERVAL = 20
CCB_POLLING_MAX_INTERVAL = 600
CCB_POLLING_TIMESLICE = 0.05
CCB_RECONNECT_FILE = 
CCB_SERVER_READ_BUFFER = 2048
CCB_SERVER_WRITE_BUFFER = 2048
CCB_SWEEP_INTERVAL = 1200
CERTIFICATE_MAPFILE = /etc/condor-ce/condor_mapfile
CGROUP_MEMORY_LIMIT_POLICY = soft
CHECKPOINT_PLATFORM = 
CHIRP_DELAYED_UPDATE_PREFIX = Chirp*
CKPT_PROBE = $(LIBEXEC)/condor_ckpt_probe
CKPT_SERVER = $(SBIN)/condor_ckpt_server
CKPT_SERVER_CHECK_PARENT_INTERVAL = 120
CKPT_SERVER_CLASSAD_FILE = 
CKPT_SERVER_CLEAN_INTERVAL = 86400
CKPT_SERVER_DIR = 
CKPT_SERVER_HOST = 
CKPT_SERVER_HOSTS = 
CKPT_SERVER_INTERVAL = 300
CKPT_SERVER_MAX_PROCESSES = 50
CKPT_SERVER_MAX_RESTORE_PROCESSES = 50
CKPT_SERVER_MAX_STORE_PROCESSES = 50
CKPT_SERVER_REPLICATION_LEVEL = 0
CKPT_SERVER_SOCKET_BUFSIZE = 65536
CLAIM_PARTITIONABLE_LEFTOVERS = $(NEGOTIATOR_USE_SLOT_WEIGHTS)
CLAIM_RECYCLING_CONSIDER_LIMITS = true
CLAIM_WORKLIFE = 1200
CLASSAD_ENABLE_USER_HOME = true
CLASSAD_LOG_STRICT_PARSING = true
CLASSAD_USER_LIBS = 
CLASSAD_USER_PYTHON_LIB = $(LIBEXEC)/libclassad_python_user.so
CLASSAD_USER_PYTHON_MODULES = 
CM_IP_ADDR = 
COLLECTOR = $(SBIN)/condor_collector
COLLECTOR.ALLOW_ADVERTISE_MASTER = $(FRIENDLY_DAEMONS)
COLLECTOR.ALLOW_ADVERTISE_SCHEDD = $(FRIENDLY_DAEMONS)
COLLECTOR.ALLOW_ADVERTISE_STARTD = $(UNMAPPED_USERS), $(USERS)
COLLECTOR_ADDRESS_FILE = $(LOG)/.collector_address
COLLECTOR_ARGS = -port $(PORT)
COLLECTOR_DEBUG = 
COLLECTOR_DEBUG_WAIT = false
COLLECTOR_ENVIRONMENT = 
COLLECTOR_FLAG = 
COLLECTOR_HOST = $(CONDOR_HOST):$(PORT)
COLLECTOR_HOST_STRING = "$(COLLECTOR_HOST)"
COLLECTOR_LOG = $(LOG)/CollectorLog
COLLECTOR_MAX_FILE_DESCRIPTORS = 10240
COLLECTOR_NAME = My Pool - $(CONDOR_HOST)
COLLECTOR_PORT = 9619
COLLECTOR_REPEAT_STARTD_ADS = 0
COLLECTOR_SOCKET_BUFSIZE = 10000*1024
COLLECTOR_STATS_SWEEP = 14400
COLLECTOR_SUPER_ADDRESS_FILE = $(LOG)/.collector_address.super
COLLECTOR_TCP_SOCKET_BUFSIZE = 128*1024
COLLECTOR_UPDATE_INTERVAL = 900
COLLECTOR_USES_SHARED_PORT = true
COMPRESS_PERIODIC_CKPT = false
COMPRESS_VACATE_CKPT = false
CONCURRENCY_LIMIT_DEFAULT = 2308032
CONDOR_ADMIN = root@$(FULL_HOSTNAME)
CONDOR_BUILD_PLATFORM = X86_64-CentOS_6.7
CONDOR_CE_COLLECTOR_HOST = collector.opensciencegrid.org
CONDOR_CREDENTIAL_DIR = /tmp
CONDOR_GAHP = $(SBIN)/condor_c-gahp
CONDOR_GAHP_WORKER = $(SBIN)/condor_c-gahp_worker_thread
CONDOR_GATEKEEPER = 
CONDOR_HOST = $(FULL_HOSTNAME)
CONDOR_Q_USE_V3_PROTOCOL = true
CONDOR_SUPPORT_EMAIL = 
CONDOR_VERSION = 8.4.3
CONDOR_VIEW_CLASSAD_TYPES = Scheduler
CONDOR_VIEW_HOST = collector1.opensciencegrid.org:9619,collector2.opensciencegrid.org:9619
CONDORC_ATTRS_TO_COPY = 
CONDORCE_MAX_JOBS = 10000
CondorIsAdmin = true
CONSOLE_DEVICES = mouse, console
ConsoleBusy = (ConsoleIdle  < $(MINUTE))
CONSUMPTION_CPUS = quantize(target.RequestCpus,{1})
CONSUMPTION_DISK = quantize(target.RequestDisk,{1024})
CONSUMPTION_MEMORY = quantize(target.RequestMemory,{128})
CONSUMPTION_POLICY = false
CONTINUE = True
ContinueIdleTime = 5 * $(MINUTE)
CORE_FILE_NAME = core.$(SUBSYSTEM)
COUNT_HYPERTHREAD_CPUS = true
CPUBusy = ($(NonCondorLoadAvg) >= $(HighLoad))
CPUIdle = ($(NonCondorLoadAvg) <= $(BackgroundLoad))
CREAM_GAHP = $(SBIN)/cream_gahp
CREATE_CORE_FILES = true
CREATE_LOCKS_ON_LOCAL_DISK = true
CRED_MIN_TIME_LEFT = 120
CRED_STORE_DIR = $(LOCAL_DIR)/cred_dir
CRED_SUPER_USERS = 
CREDD = $(SBIN)/condor_credd
CREDD_ADDRESS_FILE = $(LOG)/.credd_address
CREDD_ARGS = -p $(CREDD_PORT) -f
CREDD_CACHE_LOCALLY = false
CREDD_DEBUG = D_FULLDEBUG
CREDD_HOST = 
CREDD_LOG = $(LOG)/CredLog
CREDD_PORT = 9620
CURB_MATCHMAKING = false
DAEMON_LIST = MASTER COLLECTOR SCHEDD JOB_ROUTER, SHARED_PORT
DAEMON_SOCKET_DIR = auto
DAGMAN_ABORT_DUPLICATES = true
DAGMAN_ABORT_ON_SCARY_SUBMIT = true
DAGMAN_ALLOW_EVENTS = 114
DAGMAN_ALLOW_LOG_ERROR = false
DAGMAN_ALWAYS_RUN_POST = true
DAGMAN_AUTO_RESCUE = true
DAGMAN_CONDOR_RM_EXE = $(BIN)/condor_rm
DAGMAN_CONDOR_SUBMIT_EXE = $(BIN)/condor_submit
DAGMAN_CONFIG_FILE = 
DAGMAN_COPY_TO_SPOOL = false
DAGMAN_DEBUG = 
DAGMAN_DEBUG_CACHE_ENABLE = false
DAGMAN_DEBUG_CACHE_SIZE = 5*1024*1024
DAGMAN_DEFAULT_NODE_LOG = @(DAG_DIR)/@(DAG_FILE).nodes.log
DAGMAN_DEFAULT_PRIORITY = 0
DAGMAN_GENERATE_SUBDAG_SUBMITS = true
DAGMAN_HOLD_CLAIM_TIME = 20
DAGMAN_INSERT_SUB_FILE = 
DAGMAN_LOG_ON_NFS_IS_ERROR = true
DAGMAN_MAX_JOB_HOLDS = 100
DAGMAN_MAX_JOBS_IDLE = 1000
DAGMAN_MAX_JOBS_SUBMITTED = 0
DAGMAN_MAX_POST_SCRIPTS = 20
DAGMAN_MAX_PRE_SCRIPTS = 20
DAGMAN_MAX_RESCUE_NUM = 100
DAGMAN_MAX_SUBMIT_ATTEMPTS = 6
DAGMAN_MAX_SUBMITS_PER_INTERVAL = 5
DAGMAN_MUNGE_NODE_NAMES = true
DAGMAN_ON_EXIT_REMOVE = (ExitSignal =?= 11 || (ExitCode =!= UNDEFINED && ExitCode >=0 && ExitCode <= 2))
DAGMAN_PEGASUS_REPORT_METRICS = $(LIBEXEC)/condor_dagman_metrics_reporter
DAGMAN_PEGASUS_REPORT_TIMEOUT = 100
DAGMAN_PENDING_REPORT_INTERVAL = 600
DAGMAN_PROHIBIT_MULTI_JOBS = false
DAGMAN_RESET_RETRIES_UPON_RESCUE = true
DAGMAN_RETRY_NODE_FIRST = false
DAGMAN_RETRY_SUBMIT_FIRST = true
DAGMAN_STARTUP_CYCLE_DETECT = false
DAGMAN_SUBMIT_DELAY = 0
DAGMAN_SUBMIT_DEPTH_FIRST = false
DAGMAN_SUPPRESS_NOTIFICATION = true
DAGMAN_USE_STRICT = 1
DAGMAN_USER_LOG_SCAN_INTERVAL = 5
DAGMAN_VERBOSITY = 3
DAGMAN_WRITE_PARTIAL_RESCUE = true
DATA_DIR = $(RELEASE_DIR)/share/condor-ce
DATABASE_PURGE_INTERVAL = 
DATABASE_REINDEX_INTERVAL = 
DBMSD = $(SBIN)/condor_dbmsd
DBMSMANAGER_NAME = 
DC_DAEMON_LIST = 
DCSTATISTICS_TIMESPANS = 4m:240 20m:1200 4h:14400
DCSTATISTICS_WINDOW_SECONDS = 
DEAD_COLLECTOR_MAX_AVOIDANCE_TIME = 3600
DEBUG_TIME_FORMAT = %m/%d/%y %H:%M:%S
DEDICATED_SCHEDULER_USE_FIFO = true
DEFAULT_DOMAIN_NAME = 
DEFAULT_IO_BUFFER_BLOCK_SIZE = 
DEFAULT_IO_BUFFER_SIZE = 
DEFAULT_PRIO_FACTOR = 1000
DEFAULT_RANK = 
DEFAULT_RANK_STANDARD = 
DEFAULT_RANK_VANILLA = 
DEFAULT_UNIVERSE = 
DEFRAG = $(LIBEXEC)/condor_defrag
DEFRAG_CANCEL_REQUIREMENTS = $(DEFRAG_WHOLE_MACHINE_EXPR)
DEFRAG_DRAINING_MACHINES_PER_HOUR = 0
DEFRAG_DRAINING_SCHEDULE = graceful
DEFRAG_INTERVAL = 600
DEFRAG_LOG = $(LOG)/DefragLog
DEFRAG_MAX_CONCURRENT_DRAINING = -1
DEFRAG_MAX_WHOLE_MACHINES = -1
DEFRAG_NAME = 
DEFRAG_RANK = -ExpectedMachineGracefulDrainingBadput
DEFRAG_REQUIREMENTS = PartitionableSlot && Offline=!=True
DEFRAG_STATE_FILE = $(LOCK)/defrag_state
DEFRAG_UPDATE_INTERVAL = 300
DEFRAG_WHOLE_MACHINE_EXPR = Cpus == TotalCpus && Offline=!=True
DELEGATE_JOB_GSI_CREDENTIALS = true
DELEGATE_JOB_GSI_CREDENTIALS_LIFETIME = 86400
DELEGATE_JOB_GSI_CREDENTIALS_REFRESH = 0.25
DELTACLOUD_GAHP = $(SBIN)/deltacloud_gahp
DENY_ADMINISTRATOR = anonymous@*, unmapped@*
DENY_CLIENT = anonymous@*, unmapped@*
DENY_DAEMON = anonymous@*, unmapped@*
DENY_NEGOTIATOR = anonymous@*, unmapped@*
DENY_OWNER = anonymous@*, unmapped@*
DENY_WRITE = anonymous@*, unmapped@*
DETECTED_CORES = 1
DETECTED_CPUS = 1
DETECTED_MEMORY = 1869
DETECTED_PHYSICAL_CPUS = 1
DISABLE_AUTHENTICATION_IP_CHECK = false
DISCARD_SESSION_KEYRING_ON_STARTUP = true
DISCONNECTED_KEYBOARD_IDLE_BOOST = 1200
DNS_CACHE_REFRESH = 28800
DOCKER = /usr/bin/docker
DOMAIN = input_domain
DROP_CORE_ON_RECONFIG = 
DUTY_CYCLE_CRITICAL = .95
DUTY_CYCLE_WARNING = .90
EC2_GAHP = $(SBIN)/ec2_gahp
EC2_GAHP_LOG = /tmp/EC2GahpLog.$(USERNAME)
ECRYPTFS_ADD_PASSPHRASE = ecryptfs-add-passphrase
ECRYPTFS_KEY_TIMEOUT = 3600
EMAIL_DOMAIN = $(FULL_HOSTNAME)
EMAIL_NOTIFICATION_CC = 
ENABLE_ADDRESS_REWRITING = true
ENABLE_BACKFILL = false
ENABLE_CHIRP_DELAYED = true
ENABLE_CHIRP_IO = true
ENABLE_CHIRP_UPDATES = true
ENABLE_CLASSAD_CACHING = true
ENABLE_DEPRECATION_WARNINGS = true
ENABLE_GRID_MONITOR = true
ENABLE_HISTORY_ROTATION = true
ENABLE_IPV4 = true
ENABLE_IPV6 = false
ENABLE_KERNEL_TUNING = true
ENABLE_PERSISTENT_CONFIG = false
ENABLE_RUNTIME_CONFIG = false
ENABLE_SOAP = false
ENABLE_SOAP_SSL = false
ENABLE_STDOUT_TESTING = false
ENABLE_USERLOG_LOCKING = false
ENABLE_VERSIONED_OPSYS = true
ENABLE_WEB_SERVER = false
ENCRYPT_EXECUTE_DIRECTORY = false
ENCRYPT_EXECUTE_DIRECTORY_FILENAMES = false
ENCRYPT_SECRETS = true
ETC = $(RELEASE_DIR)/etc
EVENT_LIST = 
EVENT_LOG = 
EVENT_LOG_COUNT_EVENTS = false
EVENT_LOG_FSYNC = false
EVENT_LOG_JOB_AD_INFORMATION_ATTRS = 
EVENT_LOG_LOCKING = false
EVENT_LOG_MAX_ROTATIONS = 1
EVENT_LOG_MAX_SIZE = 1000000
EVENT_LOG_ROTATION_LOCK = $(LOCK)/EventLogLock
EVENT_LOG_USE_XML = false
EVENTD_ADMIN_MEGABITS_SEC = 
EVENTD_CAPACITY_INFO = 
EVENTD_INTERVAL = 900
EVENTD_MAX_PREPARATION = 0
EVENTD_MIN_RESCHEDULE_INTERVAL = 60
EVENTD_ROUTING_INFO = 
EVENTD_SHUTDOWN_CLEANUP_INTERVAL = 3600
EVENTD_SHUTDOWN_CONSTRAINT = 
EVENTD_SHUTDOWN_SLOW_START_INTERVAL = 0
EVENTD_SHUTDOWN_TIME = 
EVENTD_SIMULATE_SHUTDOWNS = 
EXCEPT_ON_ERROR = 
EXECUTE = $(LOCAL_DIR)/lib/condor-ce/execute
FILE_LOCK_VIA_MUTEX = true
FILE_TRANSFER_DISK_LOAD_THROTTLE = 
FILE_TRANSFER_DISK_LOAD_THROTTLE_LONG_HORIZON = 5m
FILE_TRANSFER_DISK_LOAD_THROTTLE_SHORT_HORIZON = 1m
FILE_TRANSFER_DISK_LOAD_THROTTLE_WAIT_BETWEEN_INCREMENTS = 60
FILE_XFER_LOAD_CRITICAL = 2.0
FILE_XFER_LOAD_WARNING = 1.0
FILESYSTEM_DOMAIN = $(FULL_HOSTNAME)
FILETRANSFER_PLUGINS = $(LIBEXEC)/curl_plugin, $(LIBEXEC)/data_plugin
FLOCK_COLLECTOR_HOSTS = $(FLOCK_TO)
FLOCK_NEGOTIATOR_HOSTS = $(FLOCK_TO)
FRIENDLY_DAEMONS = $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME) condor@users.opensciencegrid.org/$(FULL_HOSTNAME)
FS_ALLOW_UNSAFE = false
FS_LOCAL_DIR = 
FS_REMOTE_DIR = 
FULL_HOSTNAME = gate03.aglt2.org
GAHP = 
GAHP_ARGS = 
GAHP_DEBUG_HIDE_SENSITIVE_DATA = true
GANGLIA_CONFIG = /etc/ganglia/gmond.conf
GANGLIA_GMETRIC = 
GANGLIA_GSTAT_COMMAND = gstat --all --mpifile --gmond_ip=localhost --gmond_port=8649
GANGLIA_LIB = 
GANGLIA_LIB64_PATH = /lib64,/usr/lib64,/usr/local/lib64
GANGLIA_LIB_PATH = /lib,/usr/lib,/usr/local/lib
GANGLIA_SEND_DATA_FOR_ALL_HOSTS = false
GANGLIAD = $(LIBEXEC)/condor_gangliad
GANGLIAD_INTERVAL = 60
GANGLIAD_LOG = $(LOG)/GangliadLog
GANGLIAD_METRICS_CONFIG_DIR = /etc/condor/ganglia.d
GANGLIAD_PER_EXECUTE_NODE_METRICS = true
GANGLIAD_REQUIREMENTS = 
GANGLIAD_VERBOSITY = 0
GCE_GAHP = $(SBIN)/gce_gahp
GCE_GAHP_LOG = /tmp/GceGahpLog.$(USERNAME)
GLEXEC = 
GLEXEC_HOLD_ON_INITIAL_FAILURE = true
GLEXEC_JOB = false
GLEXEC_RETRIES = 3
GLEXEC_RETRY_DELAY = 5
GLEXEC_STARTER = false
GLEXEC_USER_DIR = 
GLITE_LOCATION = $(LIBEXEC)/glite
GLOBAL_JOB_ID_WITH_TIME = true
GRACEFULLY_REMOVE_JOBS = true
GRAM_VERSION_DETECTION = true
GRID_MONITOR = $(SBIN)/grid_monitor.sh
GRID_MONITOR_HEARTBEAT_TIMEOUT = 300
GRID_MONITOR_RETRY_DURATION = 900
grid_resource = strcat("condor ", ifThenElse(size("$(SCHEDD_NAME)") > 0, "$(SCHEDD_NAME)", "$(FULL_HOSTNAME)"), " ", "$(COLLECTOR_HOST)")
GRIDMANAGER = $(SBIN)/condor_gridmanager
GRIDMANAGER_ARGS = 
GRIDMANAGER_CONNECT_FAILURE_RETRY_COUNT = 3
GRIDMANAGER_CONNECT_FAILURE_RETRY_INTERVAL = 5
GRIDMANAGER_CONTACT_SCHEDD_DELAY = 5
GRIDMANAGER_DEBUG = 
GRIDMANAGER_GAHP_CALL_TIMEOUT_CONDOR = 28800
GRIDMANAGER_GAHPCLIENT_DEBUG = true
GRIDMANAGER_GAHPCLIENT_DEBUG_SIZE = 0
GRIDMANAGER_GLOBUS_COMMIT_TIMEOUT = 600
GRIDMANAGER_JM_EXIT_LIMIT = 30
GRIDMANAGER_LOCK = $(LOCK)/GridmanagerLock.$(USERNAME)
GRIDMANAGER_LOG = $(LOG)/GridmanagerLog.$(USERNAME)
GRIDMANAGER_MAX_JOBMANAGERS_PER_RESOURCE = 10
GRIDMANAGER_MAX_PENDING_REQUESTS = 50
GRIDMANAGER_MAX_PENDING_SUBMITS = 
GRIDMANAGER_MAX_PENDING_SUBMITS_PER_RESOURCE = 
GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE = $(CONDORCE_MAX_JOBS)
GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE_EC2 = 20
GRIDMANAGER_PER_JOB = false
GRIDMANAGER_PROXY_REFRESH_TIME = 21600
GRIDMAP = 
GRIDSHELL = 
GROUP_ACCEPT_SURPLUS = false
GROUP_AUTOREGROUP = false
GROUP_NAMES = 
GROUP_QUOTA_MAX_ALLOCATION_ROUNDS = 3
GROUP_QUOTA_ROUND_ROBIN_RATE = 1.0e100
GROUP_SORT_EXPR = ifThenElse(AccountingGroup=?="<none>",3.4e+38,ifThenElse(GroupQuota>0,GroupResourcesInUse/GroupQuota,3.3e+38))
GSI_DAEMON_CERT = /etc/grid-security/hostcert.pem
GSI_DAEMON_DIRECTORY = 
GSI_DAEMON_KEY = /etc/grid-security/hostkey.pem
GSI_DAEMON_NAME = 
GSI_DAEMON_PROXY = 
GSI_DAEMON_TRUSTED_CA_DIR = /etc/grid-security/certificates
GSI_DELEGATION_KEYBITS = 1024
GSI_SKIP_HOST_CHECK = false
GSI_SKIP_HOST_CHECK_CERT_REGEX = 
GSS_ASSIST_GRIDMAP_CACHE_EXPIRATION = 30*$(MINUTE)
GT2_GAHP = $(SBIN)/gahp_server
HA_LOCK_HOLD_TIME = 
HA_LOCK_URL = 
HA_POLL_PERIOD = 
HAD = $(SBIN)/condor_had
HAD_CONNECTION_TIMEOUT = 5
HAD_DEBUG = 
HAD_LIST = 
HAD_LOG = $(LOG)/HADLog
HAD_STAND_ALONE_DEBUG = 
HAD_UPDATE_INTERVAL = 300
HAD_USE_PRIMARY = false
HAD_USE_REPLICATION = false
HAVE_EXT_GLOBUS = 1
HAVE_EXT_KRB5 = 1
HDFS = $(SBIN)/condor_hdfs
HDFS_DEBUG = 
HDFS_LOG = $(LOG)/HDFSLog
HighLoad = 0.5
HISTORY = $(SPOOL)/history
HISTORY_HELPER_MAX_CONCURRENCY = 2
HISTORY_HELPER_MAX_HISTORY = 10000
HOST = input_host
HOSTNAME = gate03
HOUR = (60 * $(MINUTE))
HTCondorCEVersion = "2.0.0"
IdleMP8Pressure = True
IGNORE_NFS_LOCK_ERRORS = false
IN_LOWPORT = 
INCLUDE = $(RELEASE_DIR)/include
INTERACTIVE_SUBMIT_FILE = $(LIBEXEC)/interactive.sub
INVALID_LOG_FILES = 
IP = input
IP_ADDRESS = 192.41.231.35
IS_OWNER = (START =?= False)
IS_VALID_CHECKPOINT_PLATFORM = 
IsCollector = false
IsCritical = (RecentDaemonCoreDutyCycle > $(DUTY_CYCLE_CRITICAL)) || (FileTransferFileReadLoad_5m > $(FILE_XFER_LOAD_CRITICAL)) || (FileTransferFileWriteLoad_1m > $(FILE_XFER_LOAD_CRITICAL))
IsMaster = false
IsMPI = (TARGET.JobUniverse == $(MPI))
IsNegotiator = false
IsOK = !IsWarning && !IsCritical
IsSchedd = false
IsShadow = false
IsStandard = (TARGET.JobUniverse == $(STANDARD))
IsStartd = false
IsStarter = false
TOOL.IsTool = true
IsVanilla = (TARGET.JobUniverse == $(VANILLA))
IsVM = (TARGET.JobUniverse == $(VM))
IsWarning = (RecentDaemonCoreDutyCycle > $(DUTY_CYCLE_WARNING)) || (FileTransferFileReadLoad_5m > $(FILE_XFER_LOAD_WARNING)) || (FileTransferFileWriteLoad_1m > $(FILE_XFER_LOAD_WARNING))
IsWindows = false
JAVA = /usr/bin/java
JAVA_BENCHMARK_TIME = 2
JAVA_CLASSPATH_ARGUMENT = -classpath
JAVA_CLASSPATH_DEFAULT = $(LIB) $(LIB)/scimark2lib.jar .
JAVA_CLASSPATH_SEPARATOR = :
JAVA_EXTRA_ARGUMENTS = 
JAVA_MAXHEAP_ARGUMENT = -Xmx
JOB_DEFAULT_REQUESTCPUS = 1
JOB_DEFAULT_REQUESTDISK = DiskUsage
JOB_DEFAULT_REQUESTMEMORY = ifthenelse(MemoryUsage =!= UNDEFINED,MemoryUsage,(ImageSize+1023)/1024)
JOB_EXECDIR_PERMISSIONS = user
JOB_INHERITS_STARTER_ENVIRONMENT = false
JOB_PROXY_OVERRIDE_FILE = 
JOB_RENICE_INCREMENT = 0
JOB_ROUTER = $(LIBEXEC)/condor_job_router
JOB_ROUTER_DEBUG = 
JOB_ROUTER_DEFAULTS = $(JOB_ROUTER_DEFAULTS_GENERATED)
JOB_ROUTER_DEFAULTS_GENERATED = [ MaxIdleJobs = 2000; MaxJobs = $(CONDORCE_MAX_JOBS); /* by default, accept all jobs */ Requirements = True; /* now modify routed job attributes */ /* remove routed job if the client disappears for 48 hours or it is idle for 6 */ /*set_PeriodicRemove = (LastClientContact - time() > 48*60*60) || (JobStatus == 1 && (time() - QDate) > 6*60);*/ delete_PeriodicRemove = true; delete_CondorCE = true; set_RoutedJob = true; copy_environment = "orig_environment"; set_osg_environment = "OSG_GRID='/etc/osg/wn-client/' OSG_SQUID_LOCATION='squid.aglt2.org:3128' OSG_SITE_READ='/pnfs/aglt2.org/atlasscratchdisk' OSG_APP='/atlas/data08/OSG/APPSL6' OSG_HOSTNAME='gate03.aglt2.org' OSG_DATA='/atlas/data08/OSG/DATA' ATLAS_FRONTIER_CONF='(serverurl=http://lcgft-atlas.gridpp.rl.ac.uk:3128/frontierATLAS)(serverurl=http://lcgvo-frontier03.gridpp.rl.ac.uk:3128/frontierATLAS)(serverurl=http://lcgvo-frontier02.gridpp.rl.ac.uk:3128/frontierATLAS)(serverurl=http://lcgvo-frontier01.gridpp.rl.ac.uk:3128/frontierATLAS)(serverurl=http://ccfrontier.in2p3.fr:23128/ccin2p3-AtlasFrontier)(serverurl=http://ccsqfatlasli02.in2p3.fr:23128/ccin2p3-AtlasFrontier)(serverurl=http://ccsqfatlasli01.in2p3.fr:23128/ccin2p3-AtlasFrontier)(proxyurl=http://squid.aglt2.org:3128)(proxyurl=http://cache2.aglt2.org:3128)(proxyurl=http://cache.aglt2.org:3128)(proxyurl=http://cache3.aglt2.org:3128)' OSG_WN_TMP='/tmp' OSG_STORAGE_ELEMENT='True' OSG_SITE_NAME='AGLT2_TEST_CE' ATLAS_LOCAL_AREA='/atlas/data08/OSG/APPSL6/atlas_app/local' VO_ATLAS_SW_DIR='/cvmfs/atlas.cern.ch/repo/sw' GLOBUS_LOCATION='/usr' PATH='/usr/local/bin:/bin:/usr/bin' OSG_SITE_WRITE='/pnfs/aglt2.org/atlasscratchdisk' OSG_DEFAULT_SE='head01.aglt2.org' OSG_JOB_CONTACT='gate03.aglt2.org/jobmanager-condor'"; set_CondorCECollectorHost = ifThenElse(regexp(":", "$(COLLECTOR_HOST)"), "$(COLLECTOR_HOST)", strcat("$(COLLECTOR_HOST)", ":", $(COLLECTOR_PORT))); eval_set_environment = debug(strcat("HOME=", userHome(Owner, "/"), " CONDORCE_COLLECTOR_HOST=", CondorCECollectorHost, " ", ifThenElse(orig_environment is undefined, osg_environment, strcat(osg_environment, " ", orig_environment) ))); /* Set new requirements */ /* set_requirements = LastClientContact - time() < 30*60; */ set_requirements = True; set_InputRSL = ifThenElse(GlobusRSL is null, [], eval_rsl(GlobusRSL)); /* Note default memory request of 2GB */ /* Note yet another nested condition allow pass attributes (maxMemory,xcount,jobtype,queue) via gWMS Factory described within ClassAd if undefined via RSL */ eval_set_RequestMemory = ifThenElse(InputRSL.maxMemory isnt null, InputRSL.maxMemory, ifThenElse(maxMemory isnt null, maxMemory, ifThenElse(default_maxMemory isnt null, default_maxMemory, 2000))); eval_set_remote_queue = ifThenElse(InputRSL.queue isnt null, InputRSL.queue, ifThenElse(batch_queue isnt null, batch_queue, ifThenElse(queue isnt null, queue, ifThenElse(default_queue isnt null, default_queue, "")))); /* HTCondor uses RequestCpus; blahp uses SMPGranularity and NodeNumber.  Default is 1 core. */ eval_set_RequestCpus = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); eval_set_remote_SMPGranularity = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); eval_set_remote_NodeNumber = ifThenElse(InputRSL.xcount isnt null, InputRSL.xcount, ifThenElse(xcount isnt null, xcount, ifThenElse(default_xcount isnt null, default_xcount, 1))); /* If remote_cerequirements is a string, BLAH will parse it as an expression before examining it */ eval_set_remote_cerequirements = strcat(ifThenElse(default_remote_cerequirements isnt null, strcat(string(default_remote_cerequirements), " && "), ""), ifThenElse(InputRSL.maxWallTime isnt null, strcat("Walltime == ", string(60*InputRSL.maxWallTime), " && CondorCE == 1"), ifThenElse(maxWallTime isnt null, strcat("Walltime == ", string(60*maxWallTime), " && CondorCE == 1"), ifThenElse(default_maxWallTime isnt null, strcat("Walltime == ", string(60*default_maxWallTime), " && CondorCE == 1"), "CondorCE == 1")))); copy_OnExitHold = "orig_OnExitHold"; eval_set_OnExitHold = ifThenElse(orig_OnExitHold isnt null, orig_OnExitHold, false) || ifThenElse(minWalltime isnt null && RemoteWallClockTime isnt null, RemoteWallClockTime < 60*minWallTime, false); copy_OnExitHoldReason = "orig_OnExitHoldReason"; eval_set_OnExitHoldReason = ifThenElse((orig_OnExitHold isnt null) && orig_OnExitHold, ifThenElse(orig_OnExitHoldReason isnt null, orig_OnExitHoldReason, strcat("The on_exit_hold expression (", unparse(orig_OnExitHold), ") evaluated to TRUE.")), ifThenElse(minWalltime isnt null && RemoteWallClockTime isnt null && (RemoteWallClockTime < 60*minWallTime), strcat("The job's wall clock time, ", int(RemoteWallClockTime/60), "min, is less than the minimum specified by the job (", minWalltime, ")"), "Job held for unknown reason.")); copy_OnExitHoldSubCode = "orig_OnExitHoldSubCode"; eval_set_OnExitHoldSubCode = ifThenElse((orig_OnExitHold isnt null) && orig_OnExitHold, ifThenElse(orig_OnExitHoldSubCode isnt null, orig_OnExitHoldSubCode, 1), 42); ]
JOB_ROUTER_ENTRIES = /* Still to do on all routes, get job requirements and add them here */ /* ***** Route no 1 ***** */ /* ***** Analysis queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="analy"; Name = "Analysis Queue"; TargetUniverse = 5; eval_set_IdleMP8Pressure = $(IdleMP8Pressure); eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && (IfThenElse((Owner == "atlasconnect" || Owner == "muoncal"),IfThenElse(IdleMP8Pressure,(TARGET.PARTITIONED =!= TRUE),True),IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True))); eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); set_localQue = "Analysis"; set_IsAnalyJob = True; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 6; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, 3968, maxMemory), 3968 ); eval_set_RequestCpus = ifThenElse(xcount isnt undefined, xcount, 1); set_RequestAnalyTask = 1; set_RequestLMEMTask = 0; eval_set_JobMemoryLimit = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, 4194000, maxMemory * 1024), 4194000); eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 2 ***** */ /* ***** splitterNT queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="splitterNT"; Name = "Splitter ntuple queue"; TargetUniverse = 5; eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True); eval_set_AccountingGroup = "group_calibrate.muoncal"; set_localQue = "Splitter"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 10; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 3 ***** */ /* ***** splitter queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="splitter"; Name = "Splitter queue"; TargetUniverse = 5; eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True); eval_set_AccountingGroup = "group_calibrate.muoncal"; set_localQue = "Splitter"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 15; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 4 ***** */ /* ***** xrootd queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="xrootd"; Name = "Xrootd queue"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ); eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); set_localQue = "Analysis"; set_IsAnalyJob = True; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 35; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 1; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 5 ***** */ /* ***** Tier3Test queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="Tier3Test"; Name = "Tier3 Test Queue"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( IS_TIER3_TEST_QUEUE =?= True ); eval_set_AccountingGroup = strcat("group_gatekpr.prod.analy.",Owner); set_localQue = "Tier3Test"; set_IsTier3TestJob = True; set_IsAnalyJob = True; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 20; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 6 ***** */ /* ***** mp8 queue ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = ifThenElse(target.queue is undefined, false, ifThenElse(target.xcount is undefined, false, target.queue=="prod" && target.xcount==8)); Name = "MCORE Queue"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && (( TARGET.Cpus == 8 && TARGET.CPU_TYPE =?= "mp8" ) || TARGET.PARTITIONED =?= True ); eval_set_AccountingGroup = strcat("group_gatekpr.prod.mcore.",Owner); set_localQue = "MP8"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 26; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 32768, 32640, maxMemory), 32640 ); set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; eval_set_RequestCpus = ifThenElse(xcount isnt undefined, xcount, 8); set_JobMemoryLimit = 39845000; set_Slot_Type = "mp8"; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 6A ***** */ /* ***** mp8 test queue, Production ***** */ /* ***** Really only requests one cpu ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="mp8Test"; Name = "MCORE Test Queue"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( TARGET.PARTITIONED =?= True ); eval_set_AccountingGroup = strcat("group_gatekpr.prod.mcore.",Owner); set_localQue = "Default"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 125; set_Rank = Cpus*1.0; eval_set_RequestCpus = 1; eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; set_Slot_Type = "mp1"; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 6B ***** */ /* ***** mp8 test queue, Analysis ***** */ /* ***** Really only requests one cpu ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue=="mp8TestA"; Name = "MCORE Test Queue Analysis"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( TARGET.PARTITIONED =?= True ); eval_set_AccountingGroup = strcat("group_gatekpr.prod.mcore.",Owner); set_localQue = "Analysis"; set_IsAnalyJob = True; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 125; set_Rank = Cpus*1.0; eval_set_RequestCpus = 1; eval_set_RequestMemory = 3968; set_RequestAnalyTask = 1; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; set_Slot_Type = "mp1"; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 7 ***** */ /* ***** Installation queue, triggered by usatlas2 user ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue is undefined && target.Owner=="usatlas2"; Name = "Install Queue"; TargetUniverse = 5; set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( TARGET.IS_INSTALL_QUE =?= True ) && (TARGET.AGLT2_SITE == "UM" ); eval_set_AccountingGroup = strcat("group_gatekpr.other.",Owner); set_localQue = "Default"; set_IsAnalyJob = False; set_IsInstallJob = True; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 16; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 8 ***** */ /* ***** Default queue for usatlas1 user ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = ifThenElse(target.queue is undefined, regexp("usatlas1",target.Owner), ifThenElse(target.xcount is undefined, regexp("usatlas1",target.Owner), target.queue=="prod" && target.xcount==1)); Name = "ATLAS Production Queue"; TargetUniverse = 5; eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True), ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && ( TARGET.PARTITIONED =?= True )), ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True)); eval_set_AccountingGroup = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, strcat("group_gatekpr.prod.prod.",Owner), strcat("group_gatekpr.prod.mcore.",Owner,"LMEM")), strcat("group_gatekpr.prod.prod.",Owner)); set_localQue = "Default"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096,1,31), 1); set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory >= 4096, (64-TARGET.DetectedCpus+Cpus)*1.0 + TARGET.DetectedMemory/100.0, (64-TARGET.DetectedCpus+Cpus)*1.0), (64-TARGET.DetectedCpus+Cpus)*1.0), (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, 3968, maxMemory), 3968 ); eval_set_RequestCpus = ifThenElse(xcount isnt undefined, xcount, 1); set_RequestAnalyTask = 0; eval_set_RequestLMEMTask = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, 0, 1), 0 ); eval_set_JobMemoryLimit = ifThenElse(maxMemory isnt undefined, ifThenElse(maxMemory <= 4096, 4194000, maxMemory * 1024), 4194000); eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 9 ***** */ /* ***** Default queue for any other usatlas account ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue is undefined && (regexp("usatlas2",target.Owner) || regexp("usatlas3",target.Owner) || regexp("usatlas4",target.Owner)); Name = "Other ATLAS Production"; TargetUniverse = 5; eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True); eval_set_AccountingGroup = strcat("group_gatekpr.other.",Owner); set_localQue = "Default"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_JobPrio = 2; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ] /* ***** Route no 10 ***** */ /* ***** Anything else. Set queue as Default and assign to other VOs  ***** */ [ GridResource = "condor localhost localhost"; eval_set_GridResource = strcat("condor ", "$(FULL_HOSTNAME)", " $(JOB_ROUTER_SCHEDD2_POOL)"); Requirements = target.queue is undefined && ifThenElse(regexp("usatlas",target.Owner),false,true); Name = "Other Jobs"; TargetUniverse = 5; eval_set_LastAndFrac = $(LastAndFrac); set_requirements = ( ( TARGET.TotalDisk =?= undefined ) || ( TARGET.TotalDisk >= 21000000 ) ) && ( TARGET.Arch == "X86_64" ) && ( TARGET.OpSys == "LINUX" ) && ( TARGET.Disk >= RequestDisk ) && ( TARGET.Memory >= RequestMemory ) && ( TARGET.HasFileTransfer ) && IfThenElse(LastAndFrac,(TARGET.PARTITIONED =!= TRUE),True); eval_set_AccountingGroup = ifThenElse(Owner=="ops"||Owner=="mis",strcat("group_gatekeeper.other.",Owner), ifThenElse(Owner=="gpn"||Owner=="hcc"||Owner=="uscms01",strcat("group_opporA.CMS.",Owner), ifThenElse(Owner=="sbgrid",strcat("group_opporB.SBGrid.",Owner), ifThenElse(Owner=="glow",strcat("group_opporB.glow.",Owner), ifThenElse(Owner=="ligo",strcat("group_opporA.ligo.",Owner), strcat("group_VOgener.",Owner) ))))); set_localQue = "Default"; set_IsAnalyJob = False; set_IsTestJob = False; set_IsUnlimitedJob = False; set_IsTier3TestJob = False; set_IsShortJob = False; set_IsMediumJob = False; set_IsLustreJob = False; set_Rank = ifThenElse(TARGET.PARTITIONED =?= True, (64-TARGET.DetectedCpus+Cpus)*1.0, (TARGET.DetectedCpus+16-SlotId)*1.0); eval_set_RequestMemory = 3968; set_RequestAnalyTask = 0; set_RequestLMEMTask = 0; set_JobMemoryLimit = 4194000; eval_set_JobLeaseDuration = 7200; set_PeriodicRemove = ( ( RemoteWallClockTime > (3*24*60*60 + 5*60) ) || ( ifThenElse(ResidentSetSize =!= undefined,ResidentSetSize > JobMemoryLimit,false) ) || ( ifThenElse(RemoteUserCpu > 1200.0,ImageSize > JobMemoryLimit,false) ) ); ]
JOB_ROUTER_LOCK = $(LOCK)/$(JOB_ROUTER_NAME)Lock
JOB_ROUTER_LOG = $(LOG)/JobRouterLog
JOB_ROUTER_NAME = htcondor-ce
JOB_ROUTER_POLLING_PERIOD = 10
JOB_ROUTER_SCHEDD2_NAME = $(FULL_HOSTNAME)
JOB_ROUTER_SCHEDD2_POOL = aglbatch.local
JOB_ROUTER_SCHEDD2_SPOOL = /var/lib/condor/spool
JOB_ROUTER_SOURCE_JOB_CONSTRAINT = (target.x509userproxysubject =!= UNDEFINED) && (target.x509UserProxyExpiration =!= UNDEFINED) && (time() < target.x509UserProxyExpiration) && (target.JobUniverse =?= 5 || target.JobUniverse =?= 1)
JOB_START_DELAY = 0
JustCPU = ($(CPUBusy) && ($(KeyboardBusy) == False))
KBDD = $(SBIN)/condor_kbdd
KBDD_ADDRESS_FILE = $(LOG)/.kbdd_address
KBDD_DEBUG = 
KBDD_LOG = $(LOG)/KbdLog
KEEP_OUTPUT_SANDBOX = false
KEEP_POOL_HISTORY = 
KERBEROS_MAP_FILE = 
KERNEL_TUNING_LOG = $(LOG)/KernelTuning.log
KEYBOARD_CPUS = 1
KeyboardBusy = (KeyboardIdle < $(MINUTE))
KeyboardNotBusy = ($(KeyboardBusy) == False)
KILL = False
KILLING_TIMEOUT = 30
LastAndFrac = True
LastCkpt = (time() - LastPeriodicCheckpoint)
LIB = $(RELEASE_DIR)/lib
LIBEXEC = $(RELEASE_DIR)/libexec/condor
LIBVIRT_XML_SCRIPT = $(LIBEXEC)/libvirt_simple_script.awk
LINUX_KERNEL_TUNING_SCRIPT = $(LIBEXEC)/linux_kernel_tuning
LOCAL_CONFIG_DIR = /usr/share/condor-ce/config.d,/etc/condor-ce/config.d
LOCAL_CONFIG_DIR_EXCLUDE_REGEXP = ^((\..*)|(.*~)|(#.*)|(.*\.rpmsave)|(.*\.rpmnew))$
LOCAL_CONFIG_FILE = /usr/share/condor-ce/condor_ce_router_defaults|
LOCAL_DIR = /var
LOCAL_DISK_LOCK_DIR = 
LOCAL_UNIV_EXECUTE = $(SPOOL)/local_univ_execute
LOCAL_UNIVERSE_JOB_CLEANUP_RETRY_DELAY = 30
LOCAL_UNIVERSE_MAX_JOB_CLEANUP_RETRIES = 5
LOCK = $(LOCAL_DIR)/lock/condor-ce
LOCK_DEBUG_LOG_TO_APPEND = false
LOG = $(LOCAL_DIR)/log/condor-ce
LOG_ON_NFS_IS_ERROR = false
LOGS_USE_TIMESTAMP = false
MachineBusy = ($(CPUBusy) || $(KeyboardBusy))
MachineMaxVacateTime = $(MaxVacateTime)
MAIL = /bin/mail
MASTER = $(SBIN)/condor_master
MASTER_ADDRESS_FILE = $(LOG)/.master_address
MASTER_BACKOFF_CEILING = 3600
MASTER_BACKOFF_CONSTANT = 9
MASTER_BACKOFF_FACTOR = 2.0
MASTER_CHECK_NEW_EXEC_INTERVAL = 300
MASTER_DAEMON_AD_FILE = 
MASTER_DEBUG = 
MASTER_DEBUG_WAIT = false
MASTER_ENVIRONMENT = 
MASTER_FLAG = 
MASTER_HA_LIST = 
MASTER_INSTANCE_LOCK = 
MASTER_LOG = $(LOG)/MasterLog
MASTER_NAME = 
MASTER_NEW_BINARY_DELAY = 120
MASTER_NEW_BINARY_RESTART = GRACEFUL
MASTER_RECOVER_FACTOR = 300
MASTER_SQLLOG = 
MASTER_TIMEOUT_MULTIPLIER = 0
MASTER_UPDATE_INTERVAL = 300
MATCH_TIMEOUT = 120
MAX_ACCOUNTANT_DATABASE_SIZE = 1000000
MAX_C_GAHP_LOG = $(MAX_DEFAULT_LOG)
MAX_CLAIM_ALIVES_MISSED = 6
MAX_COLLECTOR_LOG = $(MAX_DEFAULT_LOG)
MAX_CREDD_LOG = $(MAX_DEFAULT_LOG)
MAX_DEFAULT_LOG = 10 Mb
MAX_DISCARDED_RUN_TIME = 3600
MAX_GANGLIAD_LOG = $(MAX_DEFAULT_LOG)
MAX_GLOBAL_JOB_PRIOS = 500
MAX_GRIDMANAGER_LOG = $(MAX_DEFAULT_LOG)
MAX_HAD_LOG = $(MAX_DEFAULT_LOG)
MAX_HDFS_LOG = $(MAX_DEFAULT_LOG)
MAX_JOB_MIRROR_UPDATE_LAG = 600
MAX_JOB_QUEUE_LOG_ROTATIONS = 1
MAX_JOB_ROUTER_LOG = $(MAX_DEFAULT_LOG)
MAX_JOBS_PER_OWNER = 100000
MAX_JOBS_PER_SUBMISSION = 20000
MAX_JOBS_RUNNING = MIN({$(DETECTED_MEMORY), 10000})
MAX_JOBS_SUBMITTED = 2147483647
MAX_KBDD_LOG = $(MAX_DEFAULT_LOG)
MAX_MASTER_LOG = $(MAX_DEFAULT_LOG)
MAX_NEGOTIATOR_LOG = $(MAX_DEFAULT_LOG)
MAX_NEGOTIATOR_MATCH_LOG = $(MAX_DEFAULT_LOG)
MAX_NUM_SCHEDD_AUDIT_LOG = 90
MAX_PID_COLLISION_RETRY = 9
MAX_PROCD_LOG = 1000000
MAX_REPLICATION_LOG = $(MAX_DEFAULT_LOG)
MAX_ROOSTER_LOG = $(MAX_DEFAULT_LOG)
MAX_SCHEDD_AUDIT_LOG = 1d
MAX_SCHEDD_LOG = $(MAX_DEFAULT_LOG)
MAX_SHADOW_EXCEPTIONS = 5
MAX_SHADOW_LOG = $(MAX_DEFAULT_LOG)
MAX_SHARED_PORT_LOG = $(MAX_DEFAULT_LOG)
MAX_SLOT_TYPES = 10
MAX_STARTD_LOG = $(MAX_DEFAULT_LOG)
MAX_STARTER_LOG = $(MAX_DEFAULT_LOG)
MAX_TRACKING_GID = 0
MAX_TRANSFER_INPUT_MB = -1
MAX_TRANSFER_LIFETIME = 300
MAX_TRANSFER_OUTPUT_MB = -1
MAX_TRANSFERER_LOG = $(MAX_DEFAULT_LOG)
MAX_VIRTUAL_MACHINE_TYPES = 10
MAX_VM_GAHP_LOG = $(MAX_DEFAULT_LOG)
MAX_XML_LOG = 1900000000
MaxSuspendTime = 10 * $(MINUTE)
MaxVacateTime = 10 * $(MINUTE)
MediumJob = (TARGET.ImageSize >= (15 * 1024) && TARGET.ImageSize < (50 * 1024))
MEMORY_USAGE_METRIC = ((ResidentSetSize+1023)/1024)
MEMORY_USAGE_METRIC_VM = VM_Memory
MERGE_JOB_ROUTER_DEFAULT_ADS = True
MIN_TRACKING_GID = 0
MINUTE = 60
MODIFY_REQUEST_EXPR_REQUESTCPUS = quantize(RequestCpus,{1})
MODIFY_REQUEST_EXPR_REQUESTDISK = quantize(RequestDisk,{1024})
MODIFY_REQUEST_EXPR_REQUESTMEMORY = quantize(RequestMemory,{128})
MOUNT_UNDER_SCRATCH = 
MPI = 8
MPI_CONDOR_RSH_PATH = 
MPI_MASTER_IP = 
MUST_MODIFY_REQUEST_EXPRS = false
NAMED_CHROOT = 
NEGOTIATE_ALL_JOBS_IN_CLUSTER = 
NEGOTIATION_CYCLE_STATS_LENGTH = 3
NEGOTIATOR = $(SBIN)/condor_negotiator
NEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION = true
NEGOTIATOR_CONSIDER_EARLY_PREEMPTION = false
NEGOTIATOR_CONSIDER_PREEMPTION = true
NEGOTIATOR_DEBUG = D_MATCH
NEGOTIATOR_DEBUG_WAIT = false
NEGOTIATOR_DISCOUNT_SUSPENDED_RESOURCES = false
NEGOTIATOR_IGNORE_USER_PRIORITIES = false
NEGOTIATOR_INFORM_STARTD = false
NEGOTIATOR_INTERVAL = 60
NEGOTIATOR_LOG = $(LOG)/NegotiatorLog
NEGOTIATOR_MATCH_EXPRS = 
NEGOTIATOR_MATCH_LOG = $(LOG)/MatchLog
NEGOTIATOR_MATCHLIST_CACHING = true
NEGOTIATOR_MAX_TIME_PER_PIESPIN = 31536000
NEGOTIATOR_MAX_TIME_PER_SCHEDD = 31536000
NEGOTIATOR_MAX_TIME_PER_SUBMITTER = 31536000
NEGOTIATOR_POST_JOB_RANK = (RemoteOwner =?= UNDEFINED) * (ifthenElse(isUndefined(KFlops), 1000, Kflops) - SlotID - 1.0e10*(Offline=?=True))
NEGOTIATOR_PRE_JOB_RANK = (10000000 * My.Rank) + (1000000 * (RemoteOwner =?= UNDEFINED)) - (100000 * Cpus) - Memory
NEGOTIATOR_READ_CONFIG_BEFORE_CYCLE = false
NEGOTIATOR_RESOURCE_REQUEST_LIST_SIZE = 20
NEGOTIATOR_SLOT_CONSTRAINT = 
NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT = 
NEGOTIATOR_STATE_FILE = 
NEGOTIATOR_TIMEOUT = 30
NEGOTIATOR_TRIM_SHUTDOWN_THRESHOLD = 0
NEGOTIATOR_UPDATE_AFTER_CYCLE = false
NEGOTIATOR_UPDATE_INTERVAL = 300
NEGOTIATOR_USE_NONBLOCKING_STARTD_CONTACT = true
NEGOTIATOR_USE_SLOT_WEIGHTS = true
NEGOTIATOR_USE_WEIGHTED_DEMAND = true
NETWORK_HOSTNAME = 
NETWORK_INTERFACE = 192.41.*
NETWORK_MAX_PENDING_CONNECTS = 0
NICE_USER_PRIO_FACTOR = 1e10
NO_DNS = false
NONBLOCKING_COLLECTOR_UPDATE = true
NonCondorLoadAvg = (LoadAvg - CondorLoadAvg)
NORDUGRID_GAHP = $(SBIN)/nordugrid_gahp
NOT_RESPONDING_TIMEOUT = 3600
NUM_CPUS = $(DETECTED_CPUS)
OBITUARY_LOG_LENGTH = 20
OPSYS = LINUX
OPSYSANDVER = SL6
OPSYSLEGACY = LINUX
OPSYSLONGNAME = Scientific Linux release 6.7 (Carbon)
OPSYSMAJORVER = 6
OPSYSNAME = SL
OPSYSSHORTNAME = SL
OPSYSVER = 607
OSG_BatchSystems = "Condor"
OSG_CONFIGURED = true
OSG_Resource = "AGLT2_TEST_CE"
OSG_ResourceCatalog = { [ AllowedVOs = { "atlas", "ops", "mis" }; CPUs = 8; MaxWallTime = 1440; Memory = 16000; Name = "AGLT2-TEST"; Requirements = TARGET.RequestCPUs <= CPUs && TARGET.RequestMemory <= Memory && member(TARGET.VO, AllowedVOs); Transform = [ set_MaxMemory = RequestMemory; set_xcount = RequestCPUs; ]; ] }
OSG_ResourceGroup = "AGLT2_TEST"
OUT_LOWPORT = 
PANDA_QUEUE_GRACE = 3
PANDA_QUEUE_SIZE = 131072
PANDA_STATISTICS_LOG = /tmp/pandaStatisticsLog
PANDA_UPDATE_TIMEOUT = 0
PANDAD = $(LIBEXEC)/condor_pandad
PARROT = 
PASSWD_CACHE_REFRESH = 72000
PER_JOB_HISTORY_DIR = /var/lib/gratia/condorce_data
PER_JOB_NAMESPACES = true
PERIODIC_CHECKPOINT = ((time() - LastPeriodicCheckpoint)/60.0) > (180.0 + $RANDOM_INTEGER(-30,30,1))
PERIODIC_EXPR_INTERVAL = 300
PERIODIC_MEMORY_SYNC = false
PERSISTENT_CONFIG_DIR = 
PID = 291667
PID_SNAPSHOT_INTERVAL = 15
PIPE_BUFFER_MAX = 10240
PLUGIN_DIR = 
PLUGINS = 
POLLING_INTERVAL = 5
POLLING_PERIOD = 
POOL_HISTORY_DIR = 
POOL_HISTORY_MAX_STORAGE = 10000000
POOL_HISTORY_SAMPLING_INTERVAL = 60
PORT = 9619
PPID = 219140
PREEMPT = False
PREEMPTION_RANK = (RemoteUserPrio * 1000000) - ifThenElse(isUndefined(TotalJobRuntime), 0, TotalJobRuntime)
PREEMPTION_REQUIREMENTS = False
PREEN = $(SBIN)/condor_preen
PREEN_ADMIN = 
PREEN_ARGS = -m -r
PREEN_INTERVAL = 86400
PRIORITY_HALFLIFE = 86400
PRIVATE_NETWORK_INTERFACE = 
PRIVATE_NETWORK_NAME = $(FULL_HOSTNAME)
PRIVSEP_ENABLED = false
PRIVSEP_SWITCHBOARD = 
PROCD = $(SBIN)/condor_procd
PROCD_ADDRESS = $(LOCK)/procd_pipe
PROCD_DEBUG = false
PROCD_LOG = $(LOG)/ProcLog
PROCD_MAX_SNAPSHOT_INTERVAL = 60
PUBLISH_OBITUARIES = 
Q_QUERY_TIMEOUT = 20
QUERY_TIMEOUT = 60
QUEUE_ALL_USERS_TRUSTED = false
QUEUE_SUPER_USER_MAY_IMPERSONATE = 
QUEUE_SUPER_USERS = $(FULL_HOSTNAME)
QUILL = $(SBIN)/condor_quill
QUILL_DB_IP_ADDR = 
QUILL_DB_NAME = 
QUILL_DB_QUERY_PASSWORD = 
QUILL_DB_TYPE = PGSQL
QUILL_DB_USER = 
QUILL_DBSIZE_LIMIT = 
QUILL_ENABLED = false
QUILL_HISTORY_CLEANING_INTERVAL = 24
QUILL_HISTORY_DURATION = 180
QUILL_IS_REMOTELY_QUERYABLE = true
QUILL_JOB_HISTORY_DURATION = 
QUILL_MAINTAIN_DB_CONN = true
QUILL_MAINTAIN_SOFT_STATE = true
QUILL_MANAGE_VACUUM = false
QUILL_NAME = 
QUILL_POLLING_PERIOD = 10
QUILL_RESOURCE_HISTORY_DURATION = 
QUILL_RUN_HISTORY_DURATION = 
QUILL_SHOULD_REINDEX = true
QUILL_USE_SQL_LOG = false
QUILL_USE_TEMP_TABLE = false
REAL_GID = 0
REAL_TIME_JOB_SUSPEND_UPDATES = 
REAL_UID = 0
RECEIVE_MSGS_DURATION = 250
RECONNECT_BACKOFF_CEILING = 300
RELEASE_DIR = /usr
REMOTE_GAHP = $(SBIN)/remote_gahp
REMOTE_PRIO_FACTOR = 1e7
REPLICATION = $(SBIN)/condor_replication
REPLICATION_DEBUG = 
REPLICATION_INTERVAL = 300
REPLICATION_LIST = 
REPLICATION_LOG = $(LOG)/ReplicationLog
REQUIRE_LOCAL_CONFIG_FILE = true
RESERVE_AFS_CACHE = false
RESERVED_SWAP = 0
RESTART_PROCD_ON_ERROR = true
REUSE_CONDOR_RUN_ACCOUNT = 
ROOSTER = $(LIBEXEC)/condor_rooster
ROOSTER_DEBUG = 
ROOSTER_INTERVAL = 300
ROOSTER_LOG = $(LOG)/RoosterLog
ROOSTER_MAX_UNHIBERNATE = 0
ROOSTER_UNHIBERNATE = Offline && Unhibernate
ROOSTER_UNHIBERNATE_RANK = 
ROOSTER_WAKEUP_CMD = "$(BIN)/condor_power -d -i"
ROUTED_JOB_MAX_TIME = 2880
RUN = $(LOCAL_DIR)/run/condor-ce
RUN_FILETRANSFER_PLUGINS_WITH_ROOT = false
RunBenchmarks = LastBenchmark == 0
RUNTIME_CONFIG_ADMIN = 
SANDBOX_TRANSFER_METHOD = 
SBIN = $(RELEASE_DIR)/sbin
SCHED_DEBUG_WAIT = false
SCHED_UNIV_RENICE_INCREMENT = 0
SCHEDD = $(SBIN)/condor_schedd
SCHEDD.ALLOW_NEGOTIATOR = $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME)
SCHEDD.ALLOW_WRITE = $(USERS), $(FULL_HOSTNAME)@daemon.opensciencegrid.org/$(FULL_HOSTNAME)
SCHEDD.SEC_DAEMON_AUTHENTICATION_METHODS = FS,GSI
SCHEDD.SEC_WRITE_AUTHENTICATION_METHODS = FS,GSI
SCHEDD_ADDRESS_FILE = $(SPOOL)/.schedd_address
SCHEDD_ATTRS = , IsOK, IsWarning, IsCritical, Status OSG_Resource OSG_ResourceGroup OSG_BatchSystems OSG_ResourceCatalog
SCHEDD_AUDIT_LOG = $(LOG)/AuditLog
SCHEDD_BACKUP_SPOOL = 
SCHEDD_CRON_NAME = 
SCHEDD_DAEMON_AD_FILE = $(SPOOL)/.schedd_classad
SCHEDD_DEBUG = D_AUDIT
SCHEDD_EXPRS =  HTCondorCEVersion grid_resource
SCHEDD_INTERVAL = 
SCHEDD_JOB_QUEUE_LOG_FLUSH_DELAY = 5
SCHEDD_LOG = $(LOG)/SchedLog
SCHEDD_MAX_FILE_DESCRIPTORS = 4096
SCHEDD_MIN_INTERVAL = 5
SCHEDD_NAME = 
SCHEDD_PREEMPTION_RANK = 
SCHEDD_PREEMPTION_REQUIREMENTS = 
SCHEDD_QUERY_WORKERS = 8
SCHEDD_RESTART_REPORT = $(LOG)/ScheddRestartReport
SCHEDD_ROUND_ATTR_DiskUsage = 25%
SCHEDD_ROUND_ATTR_ExecutableSize = 25%
SCHEDD_ROUND_ATTR_ImageSize = 25%
SCHEDD_ROUND_ATTR_NumCkpts = 4
SCHEDD_ROUND_ATTR_ProportionalSetSizeKb = 25%
SCHEDD_ROUND_ATTR_ResidentSetSize = 25%
SCHEDD_SEND_VACATE_VIA_TCP = true
SCHEDD_SUPER_ADDRESS_FILE = $(SPOOL)/.schedd_address.super
SCHEDD_USE_SLOT_WEIGHT = true
SCP = 
SEC_CLAIMTOBE_INCLUDE_DOMAIN = false
SEC_CLAIMTOBE_USER = 
SEC_CLIENT_AUTHENTICATION = OPTIONAL
SEC_CLIENT_AUTHENTICATION_METHODS = GSI,FS
SEC_CLIENT_ENCRYPTION = OPTIONAL
SEC_CLIENT_INTEGRITY = OPTIONAL
SEC_DEBUG_PRINT_KEYS = false
SEC_DEFAULT_AUTHENTICATION = REQUIRED
SEC_DEFAULT_AUTHENTICATION_METHODS = GSI
SEC_DEFAULT_AUTHENTICATION_TIMEOUT = 20
SEC_DEFAULT_ENCRYPTION = OPTIONAL
SEC_DEFAULT_INTEGRITY = REQUIRED
SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = true
SEC_INVALIDATE_SESSIONS_VIA_TCP = true
SEC_PASSWORD_DOMAIN = 
SEC_PASSWORD_FILE = 
SEC_READ_AUTHENTICATION = OPTIONAL
SEC_READ_ENCRYPTION = OPTIONAL
SEC_READ_INTEGRITY = OPTIONAL
SEC_SESSION_DURATION_SLOP = 20
SEC_TCP_SESSION_TIMEOUT = 20
SENDMAIL = sendmail
SETTABLE_ATTRS_ADMINISTRATOR = 
SETTABLE_ATTRS_ADVERTISE_MASTER = 
SETTABLE_ATTRS_ADVERTISE_SCHEDD = 
SETTABLE_ATTRS_ADVERTISE_STARTD = 
SETTABLE_ATTRS_CLIENT = 
SETTABLE_ATTRS_CONFIG = 
SETTABLE_ATTRS_DAEMON = 
SETTABLE_ATTRS_DEFAULT = 
SETTABLE_ATTRS_NEGOTIATOR = 
SETTABLE_ATTRS_OWNER = 
SETTABLE_ATTRS_READ = 
SETTABLE_ATTRS_SOAP = 
SETTABLE_ATTRS_WRITE = 
SHADOW = $(SBIN)/condor_shadow
SHADOW_ALLOW_UNSAFE_REMOTE_EXEC = 
SHADOW_CHECKPROXY_INTERVAL = 600
SHADOW_DEBUG = 
SHADOW_DEBUG_WAIT = false
SHADOW_JOB_CLEANUP_RETRY_DELAY = 30
SHADOW_LAZY_QUEUE_UPDATE = true
SHADOW_LIST = SHADOW, SHADOW_STANDARD
SHADOW_LOCK = $(LOCK)/ShadowLock
SHADOW_LOG = $(LOG)/ShadowLog
SHADOW_MAX_JOB_CLEANUP_RETRIES = 5
SHADOW_RENICE_INCREMENT = 0
SHADOW_RUN_UNKNOWN_USER_JOBS = false
SHADOW_SIZE_ESTIMATE = 125
SHADOW_STANDARD = $(SBIN)/condor_shadow.std
SHADOW_WORKLIFE = 3600
SHARED_PORT = /usr/libexec/condor/condor_shared_port
SHARED_PORT_ADDRESS_REWRITING = false
SHARED_PORT_ARGS = -p 9619
SHARED_PORT_DAEMON_AD_FILE = $(LOCK)/shared_port_ad
SHARED_PORT_DEBUG = 
SHARED_PORT_DEFAULT_ID = 
SHARED_PORT_LOG = $(LOG)/SharedPortLog
SHARED_PORT_MAX_FILE_DESCRIPTORS = 4096
SHARED_PORT_PORT = $(COLLECTOR_PORT)
SHUTDOWN_FAST_TIMEOUT = 300
SHUTDOWN_GRACEFUL_TIMEOUT = 
SINFUL = input
SLOT_WEIGHT = Cpus
SLOTS_CONNECTED_TO_CONSOLE = $(NUM_CPUS)
SLOTS_CONNECTED_TO_KEYBOARD = $(NUM_CPUS)
SLOW_CKPT_SPEED = 0
SmallJob = (TARGET.ImageSize <  (15 * 1024))
SMTP_SERVER = 
SOAP_LEAVE_IN_QUEUE = 
SOAP_SSL_CA_DIR = 
SOAP_SSL_CA_FILE = 
SOAP_SSL_DH_FILE = 
SOAP_SSL_PORT = 0
SOAP_SSL_SERVER_KEYFILE = 
SOAP_SSL_SERVER_KEYFILE_PASSWORD = 96hoursofmattslife
SOAP_SSL_SKIP_HOST_CHECK = false
SOCKET_LISTEN_BACKLOG = 500
SOFT_UID_DOMAIN = 
SPOOL = $(LOCAL_DIR)/lib/condor-ce/spool
SSH_KEYGEN = 
SSH_KEYGEN_ARGS = 
SSHD = 
SSHD_ARGS = 
STANDARD = 1
START = True
START_DAEMONS = 
START_LOCAL_UNIVERSE = TotalLocalJobsRunning + TotalSchedulerJobsRunning < 20
START_MASTER = 
START_SCHEDULER_UNIVERSE = $(START_LOCAL_UNIVERSE)
STARTD = $(SBIN)/condor_startd
STARTD_AD_REEVAL_EXPR = 
STARTD_ADDRESS_FILE = $(LOG)/.startd_address
STARTD_ATTRS = 
STARTD_CLAIM_ID_FILE = 
STARTD_COMPUTE_AVAIL_STATS = false
STARTD_CONTACT_TIMEOUT = 45
STARTD_CRON_AUTOPUBLISH = 
STARTD_CRON_NAME = 
STARTD_DEBUG = 
STARTD_FACTORY_SCRIPT_AVAILABLE_PARTITIONS = 
STARTD_FACTORY_SCRIPT_BACK_PARTITION = 
STARTD_FACTORY_SCRIPT_BOOT_PARTITION = 
STARTD_FACTORY_SCRIPT_DESTROY_PARTITION = 
STARTD_FACTORY_SCRIPT_GENERATE_PARTITION = 
STARTD_FACTORY_SCRIPT_QUERY_WORK_LOADS = 
STARTD_FACTORY_SCRIPT_SHUTDOWN_PARTITION = 
STARTD_HAS_BAD_UTMP = 0
STARTD_HISTORY = $(LOG)/startd_history
STARTD_JOB_ATTRS = 
STARTD_JOB_HOOK_KEYWORD = 
STARTD_LOG = $(LOG)/StartLog
STARTD_MAX_AVAIL_PERIOD_SAMPLES = 100
STARTD_NAME = 
STARTD_NOCLAIM_SHUTDOWN = 0
STARTD_RESOURCE_PREFIX = 
STARTD_SENDS_ALIVES = peer
STARTD_SHOULD_WRITE_CLAIM_ID_FILE = true
STARTD_SLOT_ATTRS = 
STARTD_SLOT_EXPRS = 
STARTER = $(SBIN)/condor_starter
STARTER_CHOOSES_CKPT_SERVER = 
STARTER_DEBUG = D_PID
STARTER_DEBUG_WAIT = false
STARTER_HANDLES_ALIVES = true
STARTER_INITIAL_UPDATE_INTERVAL = 8
STARTER_JOB_ENVIRONMENT = 
STARTER_JOB_HOOK_KEYWORD = 
STARTER_LIST = STARTER, STARTER_STANDARD
STARTER_LOCAL = $(SBIN)/condor_starter
STARTER_LOCAL_LOGGING = 
STARTER_LOG = $(LOG)/StarterLog
STARTER_LOG_NAME_APPEND = 
STARTER_RLIMIT_AS = 0
STARTER_STANDARD = $(SBIN)/condor_starter.std
STARTER_UPLOAD_TIMEOUT = 300
StartIdleTime = 15 * $(MINUTE)
StateTimer = (time() - EnteredCurrentState)
STATISTICS_WINDOW_QUANTUM = 240
STATISTICS_WINDOW_QUANTUM_DC = 
STATISTICS_WINDOW_QUANTUM_SCHEDD = 
STATISTICS_WINDOW_SECONDS = 1200
Status = ifThenElse(IsOK, "OK", ifThenElse(IsCritical, "CRITICAL", ifThenElse(IsWarning, "WARNING", "UNKNOWN" ) ) )
STATUS_DEFAULT_SCHEDD_PRINT_FORMAT_FILE = /usr/share/condor-ce/ce-status.cpf
STATUS_DEFAULT_STARTD_PRINT_FORMAT_FILE = /usr/share/condor-ce/pilot-status.cpf
STRING = input
SUBMIT_ATTRS = 
SUBMIT_EXPRS = 
SUBMIT_REQUIREMENT_NAMES = 
SUBMIT_SEND_RESCHEDULE = true
SUBMIT_SKIP_FILECHECKS = 
SUBSYSTEM = TOOL
SUSPEND = False
SYSAPI_GET_LOADAVG = 1
SYSTEM_JOB_MACHINE_ATTRS = Cpus,SlotWeight
SYSTEM_JOB_MACHINE_ATTRS_HISTORY_LENGTH = 1
SYSTEM_PERIODIC_HOLD = (x509userproxysubject =?= UNDEFINED) || (x509UserProxyExpiration =?= UNDEFINED) || (time() > x509UserProxyExpiration) || (RoutedBy is null && JobUniverse =!= 1 && JobUniverse =!= 5 && JobUniverse =!= 7 && JobUniverse =!= 12) || ((JobStatus =?= 1 && CurrentTime - EnteredCurrentStatus > 1800) && RoutedToJobId is null && RoutedJob =!= true)
SYSTEM_PERIODIC_HOLD_REASON = strcat("CE job in status ", JobStatus, " put on hold by SYSTEM_PERIODIC_HOLD due to ", ifThenElse(isUndefined(x509userproxysubject) || isUndefined(x509UserProxyExpiration),  "missing user proxy.", ifThenElse(time() > x509UserProxyExpiration, "expired user proxy.", ifThenElse(RoutedBy is null && JobUniverse =!= 1 && JobUniverse =!= 5 && JobUniverse =!= 7 && JobUniverse =!= 12, "invalid job universe.", "non-existent route or entry in JOB_ROUTER_ENTRIES." ) ) ) )
SYSTEM_PERIODIC_REMOVE = (JobStatus == 5 && CurrentTime - EnteredCurrentStatus > 3600*24)
SYSTEM_PERIODIC_REMOVE_REASON = strcat("CE job removed by SYSTEM_PERIODIC_REMOVE due to ", ifThenElse((JobStatus == 5 && CurrentTime - EnteredCurrentStatus > 3600*24), "being in the hold state for 24 hours.", ifThenElse((JobStatus == 5 && isUndefined(RoutedToJobId)), "non-existent route or entry in JOB_ROUTER_ENTRIES.", "input files missing." ) ) )
SYSTEM_STARTD_ATTRS = COLLECTOR_HOST_STRING DedicatedScheduler
SYSTEM_STARTD_JOB_ATTRS = ImageSize, ExecutableSize, JobUniverse, NiceUser
SYSTEM_STARTD_SLOT_ATTRS = 
SYSTEM_VALID_SPOOL_FILES = job_queue.log, job_queue.log.tmp, history, Accountant.log, Accountantnew.log, local_univ_execute, .quillwritepassword, .pgpass, .schedd_address, .schedd_address.super, .schedd_classad, OfflineLog
TCP_FORWARDING_HOST = 
TCP_KEEPALIVE_INTERVAL = 360
TCP_UPDATE_COLLECTORS = 
TEMP_DIR = 
TESTINGMODE_CLAIM_WORKLIFE = 1200
TESTINGMODE_CONTINUE = True
TESTINGMODE_KILL = False
TESTINGMODE_PERIODIC_CHECKPOINT = False
TESTINGMODE_PREEMPT = False
TESTINGMODE_PREEMPTION_RANK = 0
TESTINGMODE_PREEMPTION_REQUIREMENTS = False
TESTINGMODE_START = True
TESTINGMODE_SUSPEND = False
TESTINGMODE_WANT_SUSPEND = False
TESTINGMODE_WANT_VACATE = True
TILDE = /tmp/condor
TMP_DIR = 
TOUCH_LOG_INTERVAL = 60
TRANSFER_IO_REPORT_INTERVAL = 10
TRANSFER_IO_REPORT_TIMESPANS = 1m:60 5m:300 1h:3600 1d:86400
TRANSFER_QUEUE_USER_EXPR = strcat("Owner_",Owner)
TRANSFERD = 
TRANSFERER = $(LIBEXEC)/condor_transferer
TRANSFERER_DEBUG = 
TRANSFERER_LOG = $(LOG)/TransfererLog
TRUNC_COLLECTOR_LOG_ON_OPEN = false
TRUNC_MASTER_LOG_ON_OPEN = false
TRUNC_MATCH_LOG_ON_OPEN = false
TRUNC_NEGOTIATOR_LOG_ON_OPEN = false
TRUNC_SCHED_LOG_ON_OPEN = false
TRUNC_SHADOW_LOG_ON_OPEN = false
TRUNC_STARTER_LOG_ON_OPEN = false
TRUST_UID_DOMAIN = 
UID_DOMAIN = users.opensciencegrid.org
UNAME_ARCH = x86_64
UNAME_OPSYS = Linux
UNICORE_GAHP = $(SBIN)/unicore_gahp
UNMAPPED_USERS = *@unmapped.opensciencegrid.org
UNUSED_CLAIM_TIMEOUT = 600
UPDATE_COLLECTOR_WITH_TCP = true
UPDATE_INTERVAL = 300
UPDATE_VIEW_COLLECTOR_WITH_TCP = false
USE_AFS = 
USE_CKPT_SERVER = 
USE_CLONE_TO_CREATE_PROCESSES = true
USE_GID_PROCESS_TRACKING = false
USE_GLOBAL_JOB_PRIOS = false
USE_NFS = 
USE_PROCD = true
USE_PROCESS_GROUPS = true
USE_RESOURCE_REQUEST_COUNTS = true
USE_SCRIPT_TO_CREATE_CONFIG = false
USE_SHARED_PORT = true
USE_VISIBLE_DESKTOP = false
USER_CONFIG_FILE = user_config
USER_JOB_WRAPPER = $(DATA_DIR)/osg-wrapper
USER_LOCK = $(LOCK)/user
USER_LOG = $(LOG)/user
USER_MAPFILE = 
USERNAME = root
USERS = *@users.opensciencegrid.org
UTSNAME_MACHINE = x86_64
UTSNAME_NODENAME = gate03.aglt2.org
UTSNAME_RELEASE = 2.6.32-573.12.1.el6.x86_64
UTSNAME_SYSNAME = Linux
UTSNAME_VERSION = #1 SMP Tue Dec 15 08:24:23 CST 2015
UWCS_CONTINUE = ( $(CPUIdle) && ($(ActivityTimer) > 10) && (KeyboardIdle > $(ContinueIdleTime)) )
UWCS_KILL = false
UWCS_MaxJobRetirementTime = 0
UWCS_NEGOTIATOR_POST_JOB_RANK = (RemoteOwner =?= UNDEFINED) * (ifthenElse(isUndefined(KFlops), 1000, Kflops) - SlotID - 1.0e10*(Offline=?=True))
UWCS_NEGOTIATOR_PRE_JOB_RANK = (10000000 * My.Rank) + (1000000 * (RemoteOwner =?= UNDEFINED)) - (100000 * Cpus) - Memory
UWCS_PERIODIC_CHECKPOINT = $(LastCkpt) > (3 * $(HOUR) + $RANDOM_INTEGER(-30,30,1) * $(MINUTE) )
UWCS_PREEMPT = ( ((Activity == "Suspended") && ($(ActivityTimer) > $(MaxSuspendTime))) || (SUSPEND && (WANT_SUSPEND == False)) )
UWCS_PREEMPTION_RANK = (RemoteUserPrio * 1000000) - ifThenElse(isUndefined(TotalJobRuntime), 0, TotalJobRuntime)
UWCS_PREEMPTION_REQUIREMENTS = ((SubmitterGroup =?= RemoteGroup) && ($(StateTimer) > (1 * $(HOUR))) && (RemoteUserPrio > TARGET.SubmitterUserPrio * 1.2)) || (MY.NiceUser == True)
UWCS_START = ( (KeyboardIdle > $(StartIdleTime)) && ( $(CPUIdle) || (State != "Unclaimed" && State != "Owner")) )
UWCS_SUSPEND = ( $(KeyboardBusy) || ( (CpuBusyTime > 2 * $(MINUTE)) && $(ActivationTimer) > 90 ) )
UWCS_WANT_SUSPEND = ( $(SmallJob) || $(KeyboardNotBusy) || $(IsVanilla) ) && ( $(SUSPEND) )
UWCS_WANT_VACATE = ( $(ActivationTimer) > 10 * $(MINUTE) || $(IsVanilla) )
VALID_COD_USERS = 
VALID_SPOOL_FILES = 
VANILLA = 5
VM = 13
VM_GAHP_CONFIG = 
VM_GAHP_LOG = $(LOG)/VMGahpLog
VM_GAHP_REQ_TIMEOUT = 300
VM_GAHP_SEND_ALL_CLASSAD = true
VM_GAHP_SERVER = $(SBIN)/condor_vm-gahp
VM_HARDWARE_VT = false
VM_KILLING_TIMEOUT = 60
VM_MAX_MEMORY = 0
VM_MAX_NUMBER = 
VM_MEMORY = 
VM_NETWORKING = false
VM_NETWORKING_DEFAULT_TYPE = 
VM_NETWORKING_MAC_PREFIX = 
VM_NETWORKING_TYPE = 
VM_RECHECK_INTERVAL = 600
VM_SOFT_SUSPEND = false
VM_STATUS_INTERVAL = 60
VM_STATUS_MAX_ERROR = 5
VM_TYPE = 
VM_UNIV_NOBODY_USER = 
VMP_HOST_MACHINE = 
VMP_VM_LIST = 
VMWARE_NETWORKING_TYPE = 
VMWARE_PERL = 
VMWARE_SCRIPT = $(SBIN)/condor_vm_vmware
WANT_SUSPEND = False
WANT_UDP_COMMAND_SOCKET = true
WANT_VACATE = True
WANT_XML_LOG = false
WARN_ON_UNUSED_SUBMIT_FILE_MACROS = 
WEB_ROOT_DIR = 
WINDOWS_FIREWALL_FAILURE_RETRY = 2
WINDOWS_RMDIR = 
WINDOWS_SOFTKILL = 
X_RUNS_HERE = 
XAUTHORITY_USERS = 
XEN_ALLOW_HARDWARE_VT_SUSPEND = false
XEN_BOOTLOADER = 
XEN_BRIDGE_SCRIPT = 
XEN_SCRIPT = 
# Contributing configuration file(s):
#	/etc/condor-ce/condor_config
#	/usr/share/condor-ce/config.d/01-ce-auth-defaults.conf
#	/usr/share/condor-ce/config.d/01-ce-info-services-defaults.conf
#	/usr/share/condor-ce/config.d/01-ce-router-defaults.conf
#	/usr/share/condor-ce/config.d/01-common-auth-defaults.conf
#	/usr/share/condor-ce/config.d/01-common-collector-defaults.conf
#	/usr/share/condor-ce/config.d/02-ce-condor-defaults.conf
#	/usr/share/condor-ce/config.d/03-ce-shared-port-defaults.conf
#	/usr/share/condor-ce/config.d/03-managed-fork-defaults.conf
#	/usr/share/condor-ce/config.d/05-ce-health-defaults.conf
#	/etc/condor-ce/config.d/01-ce-auth.conf
#	/etc/condor-ce/config.d/01-ce-router.conf
#	/etc/condor-ce/config.d/01-common-auth.conf
#	/etc/condor-ce/config.d/02-ce-condor.conf
#	/etc/condor-ce/config.d/03-ce-shared-port.conf
#	/etc/condor-ce/config.d/03-managed-fork.conf
#	/etc/condor-ce/config.d/05-ce-health.conf
#	/etc/condor-ce/config.d/10-ce-collector-generated.conf
#	/etc/condor-ce/config.d/10-osg-attributes-generated.conf
#	/etc/condor-ce/config.d/50-osg-configure.conf
#	/etc/condor-ce/config.d/55-aglt2-configure.conf
#	/etc/condor-ce/config.d/60-aglt2-mp8prio.conf
#	/etc/condor-ce/config.d/99-aglt2.conf
#	/usr/share/condor-ce/condor_ce_router_defaults|
